[tox]
skipsdist = true
envlist = py310{flake8, check-isort, check-formatting, test}

[testenv]
setenv =
    SOURCE = {toxinidir}
    TEST_SOURCE = {toxinidir}/test
    PYTHONPATH = {env:SOURCE}

deps =
    -rrequirements.txt
commands =
    test: coverage erase
    test: coverage run --source {env:SOURCE} -m pytest --junit-xml=junit.xml {env:TEST_SOURCE}
    test: coverage report -m --fail-under 60
    test: coverage xml -o cobertura.xml
    flake8: flake8 {env:SOURCE} {env:TEST_SOURCE}

[testenv:check-isort]
deps =
    isort
commands =
    isort --check-only {env:SOURCE} {env:TEST_SOURCE}

; This task simply checks the python formatting and fails tox if it's not formatted correctly.
; it's better to run black on pre-commit and then have tox check that it's formatted during CI/CD.
[testenv:check-formatting]
deps =
    black
skip_install = true
commands =
    black --line-length 100 --check --diff {env:SOURCE} {env:TEST_SOURCE}

; This task is NOT run automatically when you run `tox`
; Run `tox -e format` in order to actually run the black formatter
[testenv:format]
deps =
    black
skip_install = true
commands =
    black --line-length 100 {env:SOURCE} {env:TEST_SOURCE}

[testenv:mypy]
skip_install = true
commands =
    mypy src

[pytest]
python_classes =
    *Test
    Test*
junit_family = legacy
testpaths =
    tests

[isort]
# make peace with black
multi_line_output=3
include_trailing_comma=True
force_grid_wrap=0
use_parentheses=True
line_length=100

[flake8]
ignore = E402,E501,W503,D203
exclude =
    .git,
    .hypothesis,
    .mypy_cache,
    .pytest_cache,
    .credentials,
    docker,
    staging,
    .tox
max-complexity = 10
